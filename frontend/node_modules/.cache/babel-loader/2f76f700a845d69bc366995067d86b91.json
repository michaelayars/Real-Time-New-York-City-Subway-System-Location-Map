{"ast":null,"code":"var _jsxFileName = \"/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/src/SubwayStation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport \"./SubwayStation.css\";\nimport LineCard from \"./LineCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EXPRESS_DOMAIN = \"http://localhost:4000\";\n\nconst SubwayStation = props => {\n  _s();\n\n  const stationID = props.match.params.id;\n  const [station, setStation] = useState({\n    name: \"\",\n    routes: [],\n    traintimes: {}\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    axios.get(`${EXPRESS_DOMAIN}/station/${stationID}`).then(res => {\n      setStation(res.data);\n      console.log(station);\n    }).catch(err => {\n      console.log(err);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [stationID]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (station == \"no station with the specified id\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-station\",\n      children: \"No station with the specified ID was found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"stationName\",\n      children: station.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backBtnWrapper\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        className: \"App-link\",\n        to: \"/stations\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardsWrapper\",\n      children: station.routes.map(line => {\n        return /*#__PURE__*/_jsxDEV(LineCard, {\n          line: line\n        }, line, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SubwayStation, \"CjUYaIGbUkT5E3imC8SuYnw6j3U=\");\n\n_c = SubwayStation;\nexport default SubwayStation;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubwayStation\");","map":{"version":3,"sources":["/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/src/SubwayStation.js"],"names":["React","useEffect","useState","Link","Button","axios","LineCard","EXPRESS_DOMAIN","SubwayStation","props","stationID","match","params","id","station","setStation","name","routes","traintimes","loading","setLoading","get","then","res","data","console","log","catch","err","finally","map","line"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,qBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,cAAc,GAAG,uBAAvB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAMC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAArC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC;AACrCc,IAAAA,IAAI,EAAE,EAD+B;AAErCC,IAAAA,MAAM,EAAE,EAF6B;AAGrCC,IAAAA,UAAU,EAAE;AAHyB,GAAD,CAAtC;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CACFgB,GADH,CACQ,GAAEd,cAAe,YAAWG,SAAU,EAD9C,EAEGY,IAFH,CAESC,GAAD,IAAS;AACbR,MAAAA,UAAU,CAACQ,GAAG,CAACC,IAAL,CAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AACD,KALH,EAMGa,KANH,CAMUC,GAAD,IAAS;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KARH,EASGC,OATH,CASW,MAAM;AACbT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXH;AAYD,GAbQ,EAaN,CAACV,SAAD,CAbM,CAAT;;AAeA,MAAIS,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIL,OAAO,IAAI,kCAAf,EAAmD;AACjD,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA,gBAA6BA,OAAO,CAACE;AAArC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,UAAhB;AAA2B,QAAA,EAAE,EAAC,WAA9B;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGF,OAAO,CAACG,MAAR,CAAea,GAAf,CAAoBC,IAAD,IAAU;AAC5B,4BAAO,QAAC,QAAD;AAAqB,UAAA,IAAI,EAAEA;AAA3B,WAAeA,IAAf;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnDD;;GAAMvB,a;;KAAAA,a;AAqDN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\n\nimport \"./SubwayStation.css\";\nimport LineCard from \"./LineCard\";\n\nconst EXPRESS_DOMAIN = \"http://localhost:4000\";\n\nconst SubwayStation = (props) => {\n  const stationID = props.match.params.id;\n  const [station, setStation] = useState({\n    name: \"\",\n    routes: [],\n    traintimes: {},\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    axios\n      .get(`${EXPRESS_DOMAIN}/station/${stationID}`)\n      .then((res) => {\n        setStation(res.data);\n        console.log(station);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [stationID]);\n\n  if (loading) {\n    return <div></div>;\n  }\n\n  if (station == \"no station with the specified id\") {\n    return (\n      <div className=\"no-station\">\n        No station with the specified ID was found.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"stationName\">{station.name}</h1>\n      <div className=\"backBtnWrapper\">\n        <Link className=\"App-link\" to=\"/stations\">\n          <Button variant=\"danger\">Back</Button>\n        </Link>\n      </div>\n      <div className=\"cardsWrapper\">\n        {station.routes.map((line) => {\n          return <LineCard key={line} line={line} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SubwayStation;\n"]},"metadata":{},"sourceType":"module"}