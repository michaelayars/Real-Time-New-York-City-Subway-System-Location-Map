{"ast":null,"code":"var _jsxFileName = \"/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/nycroute-app/src/SubwayStationInfo.js\",\n    _s = $RefreshSig$();\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport SubwayStationInfoItem from './SubwayStationInfoItem.js';\nimport \"./SubwayStationInfo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SubwayStationInfo = props => {\n  _s();\n\n  // start a state varaible with a blank array\n  const [data, setData] = useState([]);\n  const [reverse, setReverse] = useState([false, \"regularOrder\"]); // the following side-effect will be called once upon initial render\n\n  useEffect(() => {\n    // fetch some mock data about animals for sale\n    console.log('fetching 10 random animals...');\n    axios('https://my.api.mockaroo.com/line0.json?key=57b58bf0').then(response => {\n      // extract the data from the server response\n      setData(response.data[0].stations);\n    }).catch(err => {\n      // Mockaroo, which we're using for our Mock API, only allows 200 requests per day on the free plan\n      console.log(`Sorry, buster.  No more requests allowed today!`);\n      console.error(err); // the server returned an error... probably too many requests... until we pay!\n      // make some backup fake data\n\n      const backupData = [{\n        \"line\": \"1\",\n        \"stations\": [{\n          \"id\": 1,\n          \"name\": \"first\",\n          \"uptown\": \"[4, 5, 6]\",\n          \"downtown\": \"[2, 4, 7, 10]\"\n        }, {\n          \"id\": 2,\n          \"name\": \"second\",\n          \"uptown\": \"[5]\",\n          \"downtown\": \"[2, 5]\"\n        }, {\n          \"id\": 3,\n          \"name\": \"third\",\n          \"uptown\": \"[4,5,6,7]\",\n          \"downtown\": \"[4,5,6,7]\"\n        }, {\n          \"id\": 4,\n          \"name\": \"fourth\",\n          \"uptown\": \"[2, 5]\",\n          \"downtown\": \"[5]\"\n        }]\n      }];\n      setData(backupData);\n    });\n    console.log(data[0]);\n  }, []); // only run it once!\n\n  function reverseOrdering(e) {\n    e.preventDefault();\n\n    if (reverse[0]) {\n      setReverse([false, \"regularOrder\"]);\n    } else {\n      setReverse([true, \"reverseOrder\"]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SubwayStationInfo\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" 7 Subway Line Info \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: reverseOrdering,\n      children: \" Reverse \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      id: reverse[1],\n      children: data.map(item => /*#__PURE__*/_jsxDEV(SubwayStationInfoItem, {\n        className: \"item\",\n        details: item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SubwayStationInfo, \"C9TQjZUIvkTehTqlUfWRPG5jy4U=\");\n\n_c = SubwayStationInfo;\nexport default SubwayStationInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubwayStationInfo\");","map":{"version":3,"sources":["/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/nycroute-app/src/SubwayStationInfo.js"],"names":["Accordion","Button","React","useState","useEffect","axios","SubwayStationInfoItem","SubwayStationInfo","props","data","setData","reverse","setReverse","console","log","then","response","stations","catch","err","error","backupData","reverseOrdering","e","preventDefault","map","item","id"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,2BAAtB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAO,yBAAP;;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AACnC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAC,KAAD,EAAQ,cAAR,CAAD,CAAtC,CAHmC,CAKnC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAT,IAAAA,KAAK,CAAC,qDAAD,CAAL,CACGU,IADH,CACSC,QAAD,IAAc;AAClB;AACAN,MAAAA,OAAO,CAACM,QAAQ,CAACP,IAAT,CAAc,CAAd,EAAiBQ,QAAlB,CAAP;AACD,KAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACd;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAa,iDAAb;AACAD,MAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd,EAHc,CAGK;AAEnB;;AACA,YAAME,UAAU,GAAG,CACjB;AACE,gBAAO,GADT;AAEE,oBAAW,CACT;AACE,gBAAK,CADP;AAEE,kBAAO,OAFT;AAGE,oBAAS,WAHX;AAIE,sBAAW;AAJb,SADS,EAOT;AACE,gBAAK,CADP;AAEE,kBAAO,QAFT;AAGE,oBAAS,KAHX;AAIE,sBAAW;AAJb,SAPS,EAYT;AACE,gBAAK,CADP;AACS,kBAAO,OADhB;AAEE,oBAAS,WAFX;AAGE,sBAAW;AAHb,SAZS,EAiBT;AACE,gBAAK,CADP;AAEE,kBAAO,QAFT;AAGE,oBAAS,QAHX;AAIE,sBAAW;AAJb,SAjBS;AAFb,OADiB,CAAnB;AA8BAX,MAAAA,OAAO,CAACW,UAAD,CAAP;AACD,KA1CH;AA2CAR,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAAC,CAAD,CAAhB;AACD,GA/CQ,EA+CN,EA/CM,CAAT,CANmC,CAqD5B;;AAEP,WAASa,eAAT,CAAyBC,CAAzB,EAA4B;AAC1BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIb,OAAO,CAAC,CAAD,CAAX,EAAe;AACbC,MAAAA,UAAU,CAAC,CAAC,KAAD,EAAQ,cAAR,CAAD,CAAV;AACD,KAFD,MAGK;AACHA,MAAAA,UAAU,CAAC,CAAC,IAAD,EAAO,cAAP,CAAD,CAAV;AACD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEU,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,SAAD;AAAW,MAAA,EAAE,EAAEX,OAAO,CAAC,CAAD,CAAtB;AAAA,gBACIF,IAAD,CAAOgB,GAAP,CAAYC,IAAD,iBACV,QAAC,qBAAD;AAAuB,QAAA,SAAS,EAAE,MAAlC;AAAuD,QAAA,OAAO,EAAEA;AAAhE,SAA8CA,IAAI,CAACC,EAAnD;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5ED;;GAAMpB,iB;;KAAAA,iB;AA+EN,eAAeA,iBAAf","sourcesContent":["import Accordion from 'react-bootstrap/Accordion';\nimport Button from 'react-bootstrap/Button';\n\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport SubwayStationInfoItem from './SubwayStationInfoItem.js'\nimport \"./SubwayStationInfo.css\"\n\nconst SubwayStationInfo = (props) => {\n  // start a state varaible with a blank array\n  const [data, setData] = useState([])\n  const [reverse, setReverse] = useState([false, \"regularOrder\"])\n\n  // the following side-effect will be called once upon initial render\n  useEffect(() => {\n    // fetch some mock data about animals for sale\n    console.log('fetching 10 random animals...')\n    axios('https://my.api.mockaroo.com/line0.json?key=57b58bf0')\n      .then((response) => {\n        // extract the data from the server response\n        setData(response.data[0].stations)\n      })\n      .catch((err) => {\n        // Mockaroo, which we're using for our Mock API, only allows 200 requests per day on the free plan\n        console.log(`Sorry, buster.  No more requests allowed today!`)\n        console.error(err) // the server returned an error... probably too many requests... until we pay!\n\n        // make some backup fake data\n        const backupData = [\n          { \n            \"line\":\"1\",\n            \"stations\":[\n              {\n                \"id\":1,\n                \"name\":\"first\",\n                \"uptown\":\"[4, 5, 6]\",\n                \"downtown\":\"[2, 4, 7, 10]\"\n              },\n              {\n                \"id\":2,\n                \"name\":\"second\",\n                \"uptown\":\"[5]\",\n                \"downtown\":\"[2, 5]\"},\n              {\n                \"id\":3,\"name\":\"third\",\n                \"uptown\":\"[4,5,6,7]\",\n                \"downtown\":\"[4,5,6,7]\"\n              },\n              {\n                \"id\":4,\n                \"name\":\"fourth\",\n                \"uptown\":\"[2, 5]\",\n                \"downtown\":\"[5]\"\n              },\n            ]\n          }\n        ]\n\n        setData(backupData)\n      })\n    console.log(data[0])\n  }, []) // only run it once!\n\n  function reverseOrdering(e) {\n    e.preventDefault()\n    if (reverse[0]){\n      setReverse([false, \"regularOrder\"])\n    }\n    else {\n      setReverse([true, \"reverseOrder\"])\n    }\n  }\n\n  return (\n    <div className=\"SubwayStationInfo\">\n      <h1> 7 Subway Line Info </h1>\n      <Button onClick={reverseOrdering}> Reverse </Button>\n      <Accordion id={reverse[1]}>\n        {(data).map((item) => (\n          <SubwayStationInfoItem className =\"item\" key={item.id} details={item} />\n        ))}\n      </Accordion>\n    </div>\n  )\n}\n\n\nexport default SubwayStationInfo;\n"]},"metadata":{},"sourceType":"module"}