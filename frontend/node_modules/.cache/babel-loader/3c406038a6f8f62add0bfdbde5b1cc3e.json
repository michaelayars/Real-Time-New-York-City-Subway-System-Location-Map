{"ast":null,"code":"var _jsxFileName = \"/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/nycroute-app/src/SubwayLinesInfo.js\",\n    _s = $RefreshSig$();\n\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SubwayLinesInfoItem from \"./SubwayLinesInfoItem.js\";\nimport \"./SubwayLinesInfo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SubwayLinesInfo = props => {\n  _s();\n\n  // start a state varaible with a blank array\n  const [data, setData] = useState([]);\n  const [dataStation, setDataStation] = useState([]);\n  const [reverse, setReverse] = useState([false, \"regularOrder\"]);\n  const subwayId = props.match.params.id; // the following side-effect will be called once upon initial render\n\n  useEffect(() => {\n    // fetch some mock data about animals for sale\n    axios(\"https://my.api.mockaroo.com/line0.json?key=57b58bf0\").then(response => {\n      // extract the data from the server response\n      setDataStation(response.data[subwayId - 1]);\n      setData(response.data[subwayId - 1].stations);\n    }).catch(err => {\n      // Mockaroo, which we're using for our Mock API, only allows 200 requests per day on the free plan\n      console.log(`Sorry, buster.  No more requests allowed today!`);\n      console.error(err); // the server returned an error... probably too many requests... until we pay!\n      // make some backup fake data\n\n      const backupData = [{\n        line: \"1\",\n        stations: [{\n          id: 1,\n          name: \"first\",\n          uptown: \"[4, 5, 6]\",\n          downtown: \"[2, 4, 7, 10]\"\n        }, {\n          id: 2,\n          name: \"second\",\n          uptown: \"[5]\",\n          downtown: \"[2, 5]\"\n        }, {\n          id: 3,\n          name: \"third\",\n          uptown: \"[4,5,6,7]\",\n          downtown: \"[4,5,6,7]\"\n        }, {\n          id: 4,\n          name: \"fourth\",\n          uptown: \"[2, 5]\",\n          downtown: \"[5]\"\n        }]\n      }];\n      setData(backupData);\n    });\n  }, [subwayId]); // only run it once!\n\n  function reverseOrdering(e) {\n    e.preventDefault();\n\n    if (reverse[0]) {\n      setReverse([false, \"regularOrder\"]);\n    } else {\n      setReverse([true, \"reverseOrder\"]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", dataStation.line, \" Line Info \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: reverseOrdering,\n      id: \"listOrder\",\n      children: \" Reverse \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n      id: reverse[1],\n      children: data.map(item => /*#__PURE__*/_jsxDEV(SubwayLinesInfoItem, {\n        className: \"item\",\n        details: item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SubwayLinesInfo, \"B4X/C88xunEgkOpuJ+QaHHXjh3U=\");\n\n_c = SubwayLinesInfo;\nexport default SubwayLinesInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubwayLinesInfo\");","map":{"version":3,"sources":["/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/nycroute-app/src/SubwayLinesInfo.js"],"names":["Accordion","Button","React","useState","useEffect","axios","SubwayLinesInfoItem","SubwayLinesInfo","props","data","setData","dataStation","setDataStation","reverse","setReverse","subwayId","match","params","id","then","response","stations","catch","err","console","log","error","backupData","line","name","uptown","downtown","reverseOrdering","e","preventDefault","map","item"],"mappings":"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","sourcesContent":["import Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SubwayLinesInfoItem from \"./SubwayLinesInfoItem.js\";\nimport \"./SubwayLinesInfo.css\";\n\nconst SubwayLinesInfo = (props) => {\n  // start a state varaible with a blank array\n  const [data, setData] = useState([]);\n  const [dataStation, setDataStation] = useState([]);\n  const [reverse, setReverse] = useState([false, \"regularOrder\"]);\n\n  const subwayId = props.match.params.id;\n\n  // the following side-effect will be called once upon initial render\n  useEffect(() => {\n    // fetch some mock data about animals for sale\n    axios(\"https://my.api.mockaroo.com/line0.json?key=57b58bf0\")\n      .then((response) => {\n        // extract the data from the server response\n        setDataStation(response.data[subwayId-1]);\n        setData(response.data[subwayId - 1].stations);\n      })\n      .catch((err) => {\n        // Mockaroo, which we're using for our Mock API, only allows 200 requests per day on the free plan\n        console.log(`Sorry, buster.  No more requests allowed today!`);\n        console.error(err); // the server returned an error... probably too many requests... until we pay!\n\n        // make some backup fake data\n        const backupData = [\n          {\n            line: \"1\",\n            stations: [\n              {\n                id: 1,\n                name: \"first\",\n                uptown: \"[4, 5, 6]\",\n                downtown: \"[2, 4, 7, 10]\",\n              },\n              {\n                id: 2,\n                name: \"second\",\n                uptown: \"[5]\",\n                downtown: \"[2, 5]\",\n              },\n              {\n                id: 3,\n                name: \"third\",\n                uptown: \"[4,5,6,7]\",\n                downtown: \"[4,5,6,7]\",\n              },\n              {\n                id: 4,\n                name: \"fourth\",\n                uptown: \"[2, 5]\",\n                downtown: \"[5]\",\n              },\n            ],\n          },\n        ];\n\n        setData(backupData);\n      });\n  }, [subwayId]); // only run it once!\n\n  function reverseOrdering(e) {\n    e.preventDefault();\n    if (reverse[0]) {\n      setReverse([false, \"regularOrder\"]);\n    } else {\n      setReverse([true, \"reverseOrder\"]);\n    }\n  }\n\n  return (\n    <div>\n        <h1> {dataStation.line} Line Info </h1>\n        <Button onClick={reverseOrdering} id = \"listOrder\"> Reverse </Button>\n        <Accordion id={reverse[1]}>\n          {data.map((item) => (\n            <SubwayLinesInfoItem className=\"item\" key={item.id} details={item} />\n          ))}\n        </Accordion>\n    </div>\n  );\n};\n\nexport default SubwayLinesInfo;\n"]},"metadata":{},"sourceType":"module"}