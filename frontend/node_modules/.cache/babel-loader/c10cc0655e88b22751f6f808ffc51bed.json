{"ast":null,"code":"var _jsxFileName = \"/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/src/SubwayStation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport \"./SubwayStation.css\";\nimport LineCard from \"./LineCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EXPRESS_DOMAIN = \"http://localhost:4000\";\n\nconst formatUpdatedText = lastUpdate => {\n  if (lastUpdate <= 0) {\n    return \"Updated recently\";\n  } else if (lastUpdate === 1) {\n    return \"Updated 1 minute ago\";\n  } else {\n    return `Updated ${lastUpdate} minutes ago`;\n  }\n};\n\nconst SubwayStation = props => {\n  _s();\n\n  const stationID = props.match.params.id;\n  const [station, setStation] = useState({\n    name: \"\",\n    routes: [],\n    traintimes: {}\n  });\n  const [loading, setLoading] = useState(true);\n  const [isRefresh, setRefresh] = useState(false);\n  const [showFailure, setShowFailure] = useState(false);\n  const [lastUpdatedText, setLastUpdatedText] = useState(\"Updated recently\");\n  useEffect(() => {\n    const fetchStation = () => {\n      axios.get(`${EXPRESS_DOMAIN}/station/${stationID}`).then(res => {\n        setStation(res.data);\n        console.log(res.data.last_update);\n        setLastUpdatedText(formatUpdatedText(res.data.last_update));\n        setShowFailure(false);\n      }).catch(err => {\n        setShowFailure(true);\n        console.log(err);\n      }).finally(() => {\n        setRefresh(false);\n        setLoading(false);\n      });\n    };\n\n    fetchStation(); // background refresh every 30 seconds\n\n    const interval = setInterval(fetchStation, 30000);\n    return () => clearInterval(interval);\n  }, [isRefresh]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinnerWrapper\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        className: \"spinner\",\n        animation: \"border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (station === \"no station with specified id\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-station\",\n      children: \"No station with the specified ID was found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (station.name && station.routes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"stationName\",\n        children: station.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"App-link\",\n          to: \"/stations\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => {\n            setRefresh(true);\n          },\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-routes\",\n        children: \"No trains are arriving within the next hour.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (showFailure) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        onClose: () => setShowFailure(false),\n        dismissible: true,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"alertmsg\",\n          children: \"Error with fetching train data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"App-link\",\n          to: \"/stations\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => {\n            setRefresh(true);\n          },\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alertmsg\",\n        children: lastUpdatedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"stationName\",\n      children: station.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonsWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"App-link\",\n        to: \"/stations\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: () => {\n          setRefresh(true);\n        },\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardsWrapper\",\n      children: station.routes.map(line => {\n        return /*#__PURE__*/_jsxDEV(LineCard, {\n          line: line,\n          traintimes: station.traintimes[line]\n        }, line, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SubwayStation, \"Amx/o/sGyCcYfHHSlxhz7F+4XMI=\");\n\n_c = SubwayStation;\nexport default SubwayStation;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubwayStation\");","map":{"version":3,"sources":["/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/src/SubwayStation.js"],"names":["React","useEffect","useState","Link","Button","Spinner","Alert","axios","LineCard","EXPRESS_DOMAIN","formatUpdatedText","lastUpdate","SubwayStation","props","stationID","match","params","id","station","setStation","name","routes","traintimes","loading","setLoading","isRefresh","setRefresh","showFailure","setShowFailure","lastUpdatedText","setLastUpdatedText","fetchStation","get","then","res","data","console","log","last_update","catch","err","finally","interval","setInterval","clearInterval","length","map","line"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\n\nimport \"./SubwayStation.css\";\nimport LineCard from \"./LineCard\";\n\nconst EXPRESS_DOMAIN = \"http://localhost:4000\";\n\nconst formatUpdatedText = (lastUpdate) => {\n  if (lastUpdate <= 0) {\n    return \"Updated recently\";\n  } else if (lastUpdate === 1) {\n    return \"Updated 1 minute ago\";\n  } else {\n    return `Updated ${lastUpdate} minutes ago`;\n  }\n};\n\nconst SubwayStation = (props) => {\n  const stationID = props.match.params.id;\n  const [station, setStation] = useState({\n    name: \"\",\n    routes: [],\n    traintimes: {},\n  });\n  const [loading, setLoading] = useState(true);\n  const [isRefresh, setRefresh] = useState(false);\n  const [showFailure, setShowFailure] = useState(false);\n  const [lastUpdatedText, setLastUpdatedText] = useState(\"Updated recently\");\n\n  useEffect(() => {\n    const fetchStation = () => {\n      axios\n        .get(`${EXPRESS_DOMAIN}/station/${stationID}`)\n        .then((res) => {\n          setStation(res.data);\n          console.log(res.data.last_update);\n          setLastUpdatedText(formatUpdatedText(res.data.last_update));\n          setShowFailure(false);\n        })\n        .catch((err) => {\n          setShowFailure(true);\n          console.log(err);\n        })\n        .finally(() => {\n          setRefresh(false);\n          setLoading(false);\n        });\n    };\n    fetchStation();\n    // background refresh every 30 seconds\n    const interval = setInterval(fetchStation, 30000);\n    return () => clearInterval(interval);\n  }, [isRefresh]);\n\n  if (loading) {\n    return (\n      <div className=\"spinnerWrapper\">\n        <Spinner className=\"spinner\" animation=\"border\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n      </div>\n    );\n  }\n\n  if (station === \"no station with specified id\") {\n    return (\n      <div className=\"no-station\">\n        No station with the specified ID was found.\n      </div>\n    );\n  }\n\n  if (station.name && station.routes.length === 0) {\n    return (\n      <div className=\"container\">\n        <h1 className=\"stationName\">{station.name}</h1>\n        <div className=\"buttonsWrapper\">\n          <Link className=\"App-link\" to=\"/stations\">\n            <Button variant=\"danger\">Back</Button>\n          </Link>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              setRefresh(true);\n            }}\n          >\n            Refresh\n          </Button>\n        </div>\n        <div className=\"no-routes\">\n          No trains are arriving within the next hour.\n        </div>\n      </div>\n    );\n  }\n\n  if (showFailure) {\n    return (\n      <div className=\"container\">\n        <Alert\n          variant=\"danger\"\n          onClose={() => setShowFailure(false)}\n          dismissible\n        >\n          <p className=\"alertmsg\">Error with fetching train data</p>\n        </Alert>\n        <div className=\"buttonsWrapper\">\n          <Link className=\"App-link\" to=\"/stations\">\n            <Button variant=\"danger\">Back</Button>\n          </Link>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              setRefresh(true);\n            }}\n          >\n            Refresh\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <Alert variant=\"info\">\n        <p className=\"alertmsg\">{lastUpdatedText}</p>\n      </Alert>\n      <h1 className=\"stationName\">{station.name}</h1>\n      <div className=\"buttonsWrapper\">\n        <Link className=\"App-link\" to=\"/stations\">\n          <Button variant=\"danger\">Back</Button>\n        </Link>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            setRefresh(true);\n          }}\n        >\n          Refresh\n        </Button>\n      </div>\n      <div className=\"cardsWrapper\">\n        {station.routes.map((line) => {\n          return (\n            <LineCard\n              key={line}\n              line={line}\n              traintimes={station.traintimes[line]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SubwayStation;\n"]},"metadata":{},"sourceType":"module"}