{"ast":null,"code":"var _jsxFileName = \"/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/nycroute-app/src/SubwayStation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport \"./SubwayStation.css\";\nimport LineCard from \"./LineCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SubwayStation = props => {\n  _s();\n\n  const stationID = props.match.params.id;\n  const [station, setStation] = useState({\n    \"Stop Name\": \"\",\n    \"Daytime Routes\": []\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    axios(`http://localhost:4000/station/${stationID}`).then(res => {\n      console.log(res.data);\n      setStation(res.data);\n    }).catch(err => {\n      console.log(err);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, []);\n  /*\n  // find station with matching id, assuming array format\n  let station;\n  for (let st of stationData) {\n    if (st.id == stationID) {\n      station = st;\n    }\n  }\n  **/\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"stationName\",\n        children: station[\"Stop Name\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backBtnWrapper\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"App-link\",\n          to: \"/stations\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardsWrapper\",\n        children: station[\"Daytime Routes\"].map(line => {\n          return /*#__PURE__*/_jsxDEV(LineCard, {\n            line: line\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(SubwayStation, \"gfr1PO9k4mOqtman9M/2LnJ6o1U=\");\n\n_c = SubwayStation;\nexport default SubwayStation;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubwayStation\");","map":{"version":3,"sources":["/Users/Cary/Projects/software_engineering/nycroute/rokietnica-logistical-app/front-end/nycroute-app/src/SubwayStation.js"],"names":["React","useEffect","useState","Link","Button","axios","LineCard","SubwayStation","props","stationID","match","params","id","station","setStation","loading","setLoading","then","res","console","log","data","catch","err","finally","map","line"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,qBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAMC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAArC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC;AACrC,iBAAa,EADwB;AAErC,sBAAkB;AAFmB,GAAD,CAAtC;AAIA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAX,IAAAA,KAAK,CAAE,iCAAgCI,SAAU,EAA5C,CAAL,CACGQ,IADH,CACSC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACAP,MAAAA,UAAU,CAACI,GAAG,CAACG,IAAL,CAAV;AACD,KAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,KAPH,EAQGC,OARH,CAQW,MAAM;AACbR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVH;AAWD,GAbQ,EAaN,EAbM,CAAT;AAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAID,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBAA6BF,OAAO,CAAC,WAAD;AAApC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,UAAhB;AAA2B,UAAA,EAAE,EAAC,WAA9B;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBACGA,OAAO,CAAC,gBAAD,CAAP,CAA0BY,GAA1B,CAA+BC,IAAD,IAAU;AACvC,8BAAO,QAAC,QAAD;AAAU,YAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFA;AADH;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;AACF,CApDD;;GAAMnB,a;;KAAAA,a;AAsDN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\n\nimport \"./SubwayStation.css\";\nimport LineCard from \"./LineCard\";\n\nconst SubwayStation = (props) => {\n  const stationID = props.match.params.id;\n  const [station, setStation] = useState({\n    \"Stop Name\": \"\",\n    \"Daytime Routes\": [],\n  });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    axios(`http://localhost:4000/station/${stationID}`)\n      .then((res) => {\n        console.log(res.data);\n        setStation(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  /*\n  // find station with matching id, assuming array format\n  let station;\n  for (let st of stationData) {\n    if (st.id == stationID) {\n      station = st;\n    }\n  }\n  **/\n\n  if (loading) {\n    return <div></div>;\n  } else {\n    return (\n      <div className=\"container\">\n        <h1 className=\"stationName\">{station[\"Stop Name\"]}</h1>\n        <div className=\"backBtnWrapper\">\n          <Link className=\"App-link\" to=\"/stations\">\n            <Button variant=\"danger\">Back</Button>\n          </Link>\n        </div>\n        <div className=\"cardsWrapper\">\n          {station[\"Daytime Routes\"].map((line) => {\n            return <LineCard line={line} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default SubwayStation;\n"]},"metadata":{},"sourceType":"module"}